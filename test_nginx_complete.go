package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"time"

	v1 "github.com/kubescape/kubevuln/adapters/v1"
	"github.com/kubescape/kubevuln/core/domain"
)

func main() {
	fmt.Println("=== KubeVuln Dive Integration Test with nginx ===")
	fmt.Println()

	// Create a syft adapter with dive integration
	syftAdapter := v1.NewSyftAdapter(5*time.Minute, 512*1024*1024, 20*1024*1024, false)

	// Test with nginx image
	imageTag := "nginx:latest"
	imageName := "nginx"

	fmt.Printf("üîç Scanning image: %s\n", imageTag)
	fmt.Println()

	// Create SBOM (this will also trigger dive scan)
	ctx := context.Background()
	startTime := time.Now()

	sbom, err := syftAdapter.CreateSBOM(ctx, imageName, "", imageTag, domain.RegistryOptions{})

	if err != nil {
		log.Fatalf("‚ùå Failed to create SBOM: %v", err)
	}

	duration := time.Since(startTime)

	fmt.Printf("‚úÖ SBOM created successfully in %v!\n", duration)
	fmt.Printf("üìä Status: %s\n", sbom.Status)
	fmt.Printf("üì¶ Packages found: %d\n", len(sbom.Content.Artifacts))
	fmt.Println()

	// Wait a bit for dive to complete
	fmt.Println("‚è≥ Waiting for dive scan to complete...")
	time.Sleep(15 * time.Second)

	// Check dive results - find the most recent dive file for this image
	diveOutputPath := findMostRecentDiveFile(imageName)

	if diveOutputPath != "" {
		fmt.Printf("‚úÖ Dive scan completed! Results saved to: %s\n", diveOutputPath)

		// Read and display dive results summary
		data, err := os.ReadFile(diveOutputPath)
		if err != nil {
			log.Printf("‚ö†Ô∏è  Warning: Could not read dive results: %v", err)
		} else {
			var diveResult v1.DiveResult
			if err := json.Unmarshal(data, &diveResult); err != nil {
				log.Printf("‚ö†Ô∏è  Warning: Could not parse dive results: %v", err)
			} else {
				fmt.Printf("üìã Dive Analysis Summary:\n")
				fmt.Printf("   üñºÔ∏è  Image Size: %.2f MB\n", float64(diveResult.Image.SizeBytes)/(1024*1024))
				fmt.Printf("   üìä Total Layers: %d\n", len(diveResult.Layer))
				fmt.Printf("   ‚ö° Efficiency Score: %.2f%%\n", diveResult.Image.EfficiencyScore*100)
				fmt.Printf("   üíæ Inefficient Bytes: %.2f MB\n", float64(diveResult.Image.InefficientBytes)/(1024*1024))

				fmt.Printf("   üèóÔ∏è  Layer Details:\n")
				for i, layer := range diveResult.Layer {
					digest := layer.DigestId
					if len(digest) > 12 {
						digest = digest[:12]
					}
					fmt.Printf("      Layer %d: %s (%.2f MB)\n",
						layer.Index,
						digest,
						float64(layer.SizeBytes)/(1024*1024))
					if i >= 2 { // Show only first 3 layers
						fmt.Printf("      ... and %d more layers\n", len(diveResult.Layer)-3)
						break
					}
				}
			}
		}
	} else {
		fmt.Printf("‚ùå Dive scan failed or results not found for image: %s\n", imageName)
	}

	fmt.Println()
	fmt.Println("üéâ Test completed successfully!")
	fmt.Println()
	fmt.Println("üìÅ Files created:")
	fmt.Printf("   - SBOM: Generated in memory\n")
	if diveOutputPath != "" {
		fmt.Printf("   - Dive Results: %s\n", diveOutputPath)
	} else {
		fmt.Printf("   - Dive Results: Not found\n")
	}
	fmt.Println()
	fmt.Println("üí° The dive integration successfully:")
	fmt.Println("   ‚úÖ Reused the same image that syft downloaded")
	fmt.Println("   ‚úÖ Ran asynchronously without blocking SBOM generation")
	fmt.Println("   ‚úÖ Generated detailed layer analysis")
	fmt.Println("   ‚úÖ Saved results in JSON format with unique naming")
}

// findMostRecentDiveFile searches for the most recent dive file for the given image
func findMostRecentDiveFile(imageName string) string {
	diveResultsDir := "./dive-results"

	// Check if directory exists
	if _, err := os.Stat(diveResultsDir); os.IsNotExist(err) {
		return ""
	}

	// Read all files in the dive-results directory
	files, err := os.ReadDir(diveResultsDir)
	if err != nil {
		log.Printf("‚ö†Ô∏è  Warning: Could not read dive-results directory: %v", err)
		return ""
	}

	var diveFiles []string
	for _, file := range files {
		if !file.IsDir() && strings.HasSuffix(file.Name(), "-dive.json") {
			// Check if this file is for our image
			if strings.HasPrefix(file.Name(), imageName+"-") {
				diveFiles = append(diveFiles, filepath.Join(diveResultsDir, file.Name()))
			}
		}
	}

	if len(diveFiles) == 0 {
		return ""
	}

	// Sort files by modification time (most recent first)
	sort.Slice(diveFiles, func(i, j int) bool {
		infoI, _ := os.Stat(diveFiles[i])
		infoJ, _ := os.Stat(diveFiles[j])
		return infoI.ModTime().After(infoJ.ModTime())
	})

	return diveFiles[0] // Return the most recent file
}
